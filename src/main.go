package main

import (
	"flag"
	"log"
	"os"
	"path/filepath"
)

var (
	input  = flag.String("i", "", "input directory with Doxygen XML")
	output = flag.String("o", "output", "output directory")
)

func logStep(text string) {
	log.Println("======================================================")
	log.Printf("= %s\n", text)
	log.Println("======================================================")

}

func main() {
	flag.Parse()
	log.Println("mdox")

	// Populate registry, where all files generated by
	// doxygen will be registered.
	logStep("load registry")
	reg, err := loadRegistry(*input)
	if err != nil {
		log.Fatal(err)
	}

	logStep("dump files")
	if err := reg.dumpFiles(*input, *output); err != nil {
		log.Fatal(err)
	}

	logStep("dump groups")
	if err := reg.dumpGroups(*input, *output); err != nil {
		log.Fatal(err)
	}

	//logStep("dump pages")
	//dumpPages(reg)

	logStep("dump dirs")
	if err := reg.dumpDirs(*input, *output); err != nil {
		log.Fatal(err)
	}

	logStep("prepare indices")
	if index, err := LoadIndex(*input); err != nil {
		log.Fatal(err)
	} else {
		fd, err := os.Create(filepath.Join(*output, "INDEX.md"))
		if err != nil {
			log.Fatal(err)
		}
		defer fd.Close()
		index.Dump(fd)
	}
}
